{"ast":null,"code":"import { Username } from './../username';\nimport { Repository } from './../repository';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GithubSearchService = /*#__PURE__*/(() => {\n  class GithubSearchService {\n    constructor(http) {\n      this.http = http;\n      this.userGottenDetails = new Username('', '', '', '', '', '', 0, new Date());\n      this.repository = new Repository('', '', '', new Date());\n    }\n\n    getUsernameDetails(username) {\n      let userPromiseDetails = new Promise((resolve, reject) => {\n        this.http.get(environment.url + \"/\" + username + \"?access_token=\" + environment.apikey).toPromise().then(response => {\n          console.log(response);\n          this.userGottenDetails = response;\n          console.log(this.userGottenDetails);\n          resolve();\n        }, error => {\n          reject(error);\n          console.log(error);\n        });\n      });\n      return userPromiseDetails;\n    }\n\n    getRepositoryUser(username) {\n      let UserRepositoryPromise = new Promise((resolve, reject) => {\n        this.http.get(environment.url + \"/\" + username + '/repos?access_token=' + environment.apikey).toPromise().then(response => {\n          this.repository = response;\n          resolve();\n        }, error => {\n          reject(error);\n          console.log(error);\n        });\n      });\n      return UserRepositoryPromise;\n    }\n\n  }\n\n  GithubSearchService.ɵfac = function GithubSearchService_Factory(t) {\n    return new (t || GithubSearchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GithubSearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GithubSearchService,\n    factory: GithubSearchService.ɵfac,\n    providedIn: 'root'\n  });\n  return GithubSearchService;\n})();","map":null,"metadata":{},"sourceType":"module"}